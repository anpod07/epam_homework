pipeline {
  agent {
//    label 'master'
    label 'docker-slave-1'
  }

  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')
    disableConcurrentBuilds()
    timestamps()
  }

  stages {
    stage('CleanWorkspace') {
      steps {
        cleanWs()
      }
    }
    stage('GetCodeFromGitHub') {
      steps {
        git branch: 'main', credentialsId: 'github-key', url: 'git@github.com:anpod07/proj-4.git'
        sh '''
          pwd
          ls -la
        '''
      }
    }
    stage('LoginToDockerHUB') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub_login', 
          passwordVariable: 'PASSWORD', 
          usernameVariable: 'USERNAME')]) {
            sh "docker login -u $USERNAME -p $PASSWORD"
        }
      }
    }
    stage('CreateDockerImage') {
      steps {
        sh 'docker build -t anpod07/proj-4-pyapp:latest .'
      }
    }
    stage('TestAndPushDockerImage') {
      steps {
        sh '''
          docker run -d --rm --name py-test -p 8000:8000 anpod07/proj-4-pyapp:latest
          docker ps --no-trunc
          sleep 2
          if [ -n `docker ps -q -f ancestor=py-test` ]
           then
            echo 'HTTP HEALTH PASSED'
            docker push anpod07/proj-4-pyapp:latest
           else
            echo 'HTTP HEALTH FAILED'
          fi
          docker stop py-test
          docker rmi anpod07/proj-4-pyapp:latest
        '''
      }
    }
  }
}

